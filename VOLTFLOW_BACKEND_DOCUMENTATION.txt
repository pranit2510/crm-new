================================================================================
                    VOLTFLOW CRM - BACKEND SYSTEM DOCUMENTATION
                         Complete Technical Reference Guide
================================================================================

TABLE OF CONTENTS:
==================
1. SYSTEM ARCHITECTURE OVERVIEW
2. DATABASE SCHEMA & RELATIONSHIPS
3. BUSINESS LOGIC & FLOW STATES
4. AUTHENTICATION SYSTEM
5. API OPERATIONS & DATA FLOW
6. CALCULATIONS & FORMULAS
7. FRONTEND-BACKEND INTEGRATION
8. SUPABASE SETUP & CONFIGURATION
9. SECURITY IMPLEMENTATION
10. PERFORMANCE OPTIMIZATION
11. ERROR HANDLING STRATEGIES
12. PRODUCTION DEPLOYMENT
13. MONITORING & MAINTENANCE

================================================================================
1. SYSTEM ARCHITECTURE OVERVIEW
================================================================================

CORE CONCEPT:
VoltFlow CRM is a comprehensive business management system for electricians that 
handles the complete customer lifecycle from leads to invoicing.

ARCHITECTURE PATTERN:
- Frontend: Next.js 15 with TypeScript (React Server Components + Client Components)
- Backend: Supabase (PostgreSQL + Auth + Real-time + Storage)
- State Management: React Context + Zustand for complex state
- Styling: Tailwind CSS with custom design system
- Authentication: Supabase Auth with Row Level Security (RLS)

SYSTEM MODULES:
1. Leads Management - Prospective customers
2. Clients Management - Converted customers
3. Jobs Management - Work orders and scheduling
4. Quotes Management - Pricing and proposals
5. Invoices Management - Billing and payments
6. Dashboard - Analytics and overview
7. Calendar - Scheduling and timeline
8. Settings - User and system configuration

DATA FLOW ARCHITECTURE:
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│    Leads    │───▶│   Clients   │───▶│    Jobs     │───▶│  Invoices   │
└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘
                           │                  │
                           ▼                  ▼
                   ┌─────────────┐    ┌─────────────┐
                   │   Quotes    │    │  Calendar   │
                   └─────────────┘    └─────────────┘

================================================================================
2. DATABASE SCHEMA & RELATIONSHIPS
================================================================================

CORE TABLES:
============

A. USER_PROFILES TABLE:
-----------------------
Purpose: Store user information and roles
Structure:
```sql
CREATE TABLE user_profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  role TEXT DEFAULT 'Technician' CHECK (role IN ('Admin', 'Technician', 'Manager')),
  avatar_url TEXT,
  phone TEXT
);
```

B. CLIENTS TABLE:
-----------------
Purpose: Store customer information
Structure:
```sql
CREATE TABLE clients (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  notes TEXT,
  address TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive'))
);
```

C. LEADS TABLE:
---------------
Purpose: Store potential customers before conversion
Structure:
```sql
CREATE TABLE leads (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  source TEXT, -- 'Website', 'Referral', 'Cold Call', etc.
  status TEXT DEFAULT 'new' CHECK (status IN ('new', 'contacted', 'qualified', 'lost')),
  notes TEXT,
  assigned_to TEXT
);
```

D. JOBS TABLE:
--------------
Purpose: Store work orders and job details
Structure:
```sql
CREATE TABLE jobs (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  start_date TIMESTAMP WITH TIME ZONE,
  end_date TIMESTAMP WITH TIME ZONE,
  budget DECIMAL(10,2),
  priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high'))
);
```

E. QUOTES TABLE:
----------------
Purpose: Store pricing proposals
Structure:
```sql
CREATE TABLE quotes (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  job_id BIGINT REFERENCES jobs(id) ON DELETE SET NULL,
  amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'accepted', 'rejected')),
  valid_until TIMESTAMP WITH TIME ZONE,
  terms TEXT,
  notes TEXT
);
```

F. INVOICES TABLE:
------------------
Purpose: Store billing information
Structure:
```sql
CREATE TABLE invoices (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  job_id BIGINT REFERENCES jobs(id) ON DELETE SET NULL,
  quote_id BIGINT REFERENCES quotes(id) ON DELETE SET NULL,
  amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'paid', 'overdue')),
  due_date TIMESTAMP WITH TIME ZONE,
  payment_terms TEXT,
  notes TEXT
);
```

RELATIONSHIPS DIAGRAM:
======================
```
user_profiles (1) ──── (many) clients
clients (1) ──── (many) jobs
clients (1) ──── (many) quotes  
clients (1) ──── (many) invoices
jobs (1) ──── (0..1) quotes
jobs (1) ──── (0..many) invoices
quotes (1) ──── (0..1) invoices
leads ──── [converts to] ──── clients
```

INDEXES FOR PERFORMANCE:
========================
```sql
CREATE INDEX idx_jobs_client_id ON jobs(client_id);
CREATE INDEX idx_jobs_start_date ON jobs(start_date);
CREATE INDEX idx_quotes_client_id ON quotes(client_id);
CREATE INDEX idx_quotes_job_id ON quotes(job_id);
CREATE INDEX idx_invoices_client_id ON invoices(client_id);
CREATE INDEX idx_invoices_job_id ON invoices(job_id);
CREATE INDEX idx_invoices_due_date ON invoices(due_date);
CREATE INDEX idx_invoices_status ON invoices(status);
```

================================================================================
3. BUSINESS LOGIC & FLOW STATES
================================================================================

LEAD FLOW STATES:
=================
New → Contacted → Qualified → [Convert to Client] | Lost

State Transitions:
- New: Fresh lead, no contact made
- Contacted: Initial contact established
- Qualified: Lead shows genuine interest and budget
- Lost: Lead not interested or unqualified

CLIENT FLOW STATES:
===================
Prospective → Active → VIP | Inactive

State Logic:
- Prospective: New client, no jobs completed
- Active: Has completed jobs, regular customer
- VIP: High-value client (>$10k revenue or >5 jobs)
- Inactive: No activity for 6+ months

JOB FLOW STATES:
================
Pending → In Progress → Completed | Cancelled

State Transitions:
- Pending: Job scheduled but not started
- In Progress: Work has begun
- Completed: Job finished successfully
- Cancelled: Job cancelled by client or company

QUOTE FLOW STATES:
==================
Draft → Sent → [Accepted → Convert to Job] | Rejected

State Logic:
- Draft: Quote being prepared
- Sent: Quote delivered to client
- Accepted: Client approved quote (triggers job creation)
- Rejected: Client declined quote

INVOICE FLOW STATES:
====================
Draft → Sent → Paid | Overdue

State Transitions:
- Draft: Invoice being prepared
- Sent: Invoice delivered to client
- Paid: Payment received
- Overdue: Past due date and unpaid

================================================================================
4. AUTHENTICATION SYSTEM
================================================================================

SUPABASE AUTH CONFIGURATION:
=============================
```javascript
// Environment Variables Required:
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

AUTH SERVICE IMPLEMENTATION:
============================
Location: /src/lib/auth.ts

Core Functions:
1. login(credentials) - User authentication
2. signUp(credentials) - New user registration
3. logout() - Session termination
4. getCurrentUser() - Get current session
5. resetPassword(email) - Password reset flow
6. updatePassword(newPassword) - Change password

USER ROLES & PERMISSIONS:
==========================
1. Admin: Full system access, user management
2. Manager: View all data, manage jobs and clients
3. Technician: View assigned jobs, update job status

ROW LEVEL SECURITY (RLS) POLICIES:
===================================
```sql
-- Users can only access their own profile
CREATE POLICY "Users can view own profile" ON user_profiles 
FOR SELECT USING (auth.uid() = id);

-- Authenticated users can view business data
CREATE POLICY "Authenticated users can view clients" ON clients 
FOR SELECT USING (auth.role() = 'authenticated');

-- Role-based access for modifications
CREATE POLICY "Admins can manage all data" ON clients 
FOR ALL USING (auth.jwt() ->> 'role' = 'Admin');
```

SESSION MANAGEMENT:
===================
- Automatic token refresh
- Persistent sessions across browser sessions
- Secure logout with token invalidation
- Real-time auth state changes

================================================================================
5. API OPERATIONS & DATA FLOW
================================================================================

SUPABASE CLIENT OPERATIONS:
============================
Location: /src/lib/supabase-client.ts

CLIENT OPERATIONS:
------------------
```javascript
clientOperations = {
  async create(client) - Create new client
  async getAll() - Fetch all clients
  async getById(id) - Fetch specific client
  async update(id, updates) - Update client
  async delete(id) - Delete client
}
```

JOB OPERATIONS:
---------------
```javascript
jobOperations = {
  async create(job) - Create new job
  async getAll() - Fetch all jobs with client data
  async getByClientId(clientId) - Fetch jobs for specific client
  async update(id, updates) - Update job status/details
  async delete(id) - Delete job
}
```

QUOTE OPERATIONS:
-----------------
```javascript
quoteOperations = {
  async create(quote) - Create new quote
  async getAll() - Fetch all quotes
  async getByClientId(clientId) - Fetch quotes for client
  async update(id, updates) - Update quote status
  async delete(id) - Delete quote
}
```

INVOICE OPERATIONS:
-------------------
```javascript
invoiceOperations = {
  async create(invoice) - Create new invoice
  async getAll() - Fetch all invoices
  async getByClientId(clientId) - Fetch invoices for client
  async markPaid(id) - Mark invoice as paid
  async markOverdue(id) - Mark invoice as overdue
}
```

DATA FETCHING PATTERNS:
=======================
1. Single Record: getById(id)
2. Related Records: getByClientId(clientId)
3. All Records: getAll() with pagination
4. Filtered Records: Custom queries with .filter()
5. Real-time Updates: Supabase subscriptions

ERROR HANDLING PATTERN:
=======================
```javascript
try {
  setLoading(true);
  setError(null);
  const data = await operation();
  setData(data);
} catch (err) {
  setError(err.message);
  console.error('Operation failed:', err);
} finally {
  setLoading(false);
}
```

================================================================================
6. CALCULATIONS & FORMULAS
================================================================================

DASHBOARD STATISTICS:
=====================

A. ACTIVE JOBS COUNT:
```javascript
activeJobs = jobs.filter(job => 
  job.status === 'pending' || job.status === 'in_progress'
).length;
```

B. PENDING QUOTES COUNT:
```javascript
pendingQuotes = quotes.filter(quote => 
  quote.status === 'draft' || quote.status === 'sent'
).length;
```

C. UNPAID INVOICES COUNT:
```javascript
unpaidInvoices = invoices.filter(invoice => 
  invoice.status === 'sent' || invoice.status === 'overdue'
).length;
```

D. TOTAL REVENUE CALCULATION:
```javascript
totalRevenue = invoices
  .filter(invoice => invoice.status === 'paid')
  .reduce((sum, invoice) => sum + invoice.amount, 0);
```

E. OVERDUE INVOICES CALCULATION:
```javascript
overdueInvoices = invoices.filter(invoice => {
  if (invoice.status !== 'sent') return false;
  const dueDate = new Date(invoice.due_date);
  return dueDate < new Date();
}).length;
```

CLIENT CLASSIFICATION LOGIC:
=============================

A. CLIENT STATUS DETERMINATION:
```javascript
function determineClientStatus(client, jobs, invoices) {
  const clientJobs = jobs.filter(job => job.client_id === client.id);
  const clientInvoices = invoices.filter(inv => inv.client_id === client.id);
  
  if (client.status === 'inactive') return 'Inactive';
  
  const totalRevenue = clientInvoices
    .filter(inv => inv.status === 'paid')
    .reduce((sum, inv) => sum + inv.amount, 0);
  
  const totalJobs = clientJobs.length;
  
  // VIP Criteria: >$10k revenue OR >5 completed jobs
  if (totalRevenue > 10000 || totalJobs > 5) return 'VIP';
  
  // Active: Has completed jobs
  if (totalJobs > 0) return 'Active';
  
  // Default: Prospective
  return 'Prospective';
}
```

B. RELATIVE TIME CALCULATION:
```javascript
function getRelativeTime(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) return 'Just now';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
  if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
  return date.toLocaleDateString();
}
```

BUSINESS INTELLIGENCE METRICS:
===============================

A. CONVERSION RATE (LEADS TO CLIENTS):
```javascript
conversionRate = (totalClients / totalLeads) * 100;
```

B. AVERAGE JOB VALUE:
```javascript
averageJobValue = totalRevenue / completedJobs.length;
```

C. QUOTE ACCEPTANCE RATE:
```javascript
quoteAcceptanceRate = (acceptedQuotes.length / sentQuotes.length) * 100;
```

D. PAYMENT COLLECTION RATE:
```javascript
collectionRate = (paidInvoices.length / sentInvoices.length) * 100;
```

================================================================================
7. FRONTEND-BACKEND INTEGRATION
================================================================================

COMPONENT DATA FLOW:
====================

A. PAGE-LEVEL DATA FETCHING:
```javascript
// Pattern used in all main pages
useEffect(() => {
  loadData();
}, []);

const loadData = async () => {
  try {
    setLoading(true);
    const data = await apiOperation.getAll();
    processAndSetData(data);
  } catch (error) {
    handleError(error);
  } finally {
    setLoading(false);
  }
};
```

B. REAL-TIME UPDATES PATTERN:
```javascript
useEffect(() => {
  const subscription = supabase
    .from('table_name')
    .on('*', payload => {
      handleRealTimeUpdate(payload);
    })
    .subscribe();

  return () => subscription.unsubscribe();
}, []);
```

STATE MANAGEMENT PATTERNS:
==========================

A. AUTHENTICATION STATE:
```javascript
// Global auth context
const AuthContext = createContext();
const [user, setUser] = useState(null);
const [loading, setLoading] = useState(true);
```

B. MODULE-SPECIFIC STATE:
```javascript
// Each module (clients, jobs, etc.) manages:
const [data, setData] = useState([]);
const [filteredData, setFilteredData] = useState([]);
const [searchTerm, setSearchTerm] = useState('');
const [statusFilter, setStatusFilter] = useState('All');
const [loading, setLoading] = useState(true);
const [error, setError] = useState(null);
```

FORM HANDLING PATTERNS:
=======================
```javascript
const [formData, setFormData] = useState(initialState);
const [submitting, setSubmitting] = useState(false);
const [errors, setErrors] = useState({});

const handleSubmit = async (e) => {
  e.preventDefault();
  if (!validateForm()) return;
  
  try {
    setSubmitting(true);
    await apiOperation.create(formData);
    router.push('/success-page');
  } catch (error) {
    setErrors({ submit: error.message });
  } finally {
    setSubmitting(false);
  }
};
```

================================================================================
8. SUPABASE SETUP & CONFIGURATION
================================================================================

INITIAL SUPABASE PROJECT SETUP:
================================

1. CREATE SUPABASE PROJECT:
   - Go to https://supabase.com
   - Create new project
   - Note down URL and anon key

2. ENVIRONMENT VARIABLES:
```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
```

3. DATABASE SETUP:
   Run the complete schema SQL in Supabase SQL Editor:

```sql
-- Enable Row Level Security
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE quotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create user profiles table (linked to auth.users)
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  role TEXT DEFAULT 'Technician' CHECK (role IN ('Admin', 'Technician', 'Manager')),
  avatar_url TEXT,
  phone TEXT
);

-- Create business tables
CREATE TABLE IF NOT EXISTS clients (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  notes TEXT,
  address TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive'))
);

CREATE TABLE IF NOT EXISTS jobs (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  start_date TIMESTAMP WITH TIME ZONE,
  end_date TIMESTAMP WITH TIME ZONE,
  budget DECIMAL(10,2),
  priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high'))
);

CREATE TABLE IF NOT EXISTS leads (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  source TEXT,
  status TEXT DEFAULT 'new' CHECK (status IN ('new', 'contacted', 'qualified', 'lost')),
  notes TEXT,
  assigned_to TEXT
);

CREATE TABLE IF NOT EXISTS quotes (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  job_id BIGINT REFERENCES jobs(id) ON DELETE SET NULL,
  amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'accepted', 'rejected')),
  valid_until TIMESTAMP WITH TIME ZONE,
  terms TEXT,
  notes TEXT
);

CREATE TABLE IF NOT EXISTS invoices (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  client_id BIGINT REFERENCES clients(id) ON DELETE CASCADE,
  job_id BIGINT REFERENCES jobs(id) ON DELETE SET NULL,
  quote_id BIGINT REFERENCES quotes(id) ON DELETE SET NULL,
  amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'paid', 'overdue')),
  due_date TIMESTAMP WITH TIME ZONE,
  payment_terms TEXT,
  notes TEXT
);

-- Create performance indexes
CREATE INDEX IF NOT EXISTS idx_jobs_client_id ON jobs(client_id);
CREATE INDEX IF NOT EXISTS idx_quotes_client_id ON quotes(client_id);
CREATE INDEX IF NOT EXISTS idx_quotes_job_id ON quotes(job_id);
CREATE INDEX IF NOT EXISTS idx_invoices_client_id ON invoices(client_id);
CREATE INDEX IF NOT EXISTS idx_invoices_job_id ON invoices(job_id);
CREATE INDEX IF NOT EXISTS idx_invoices_quote_id ON invoices(quote_id);
CREATE INDEX IF NOT EXISTS idx_user_profiles_email ON user_profiles(email);

-- Row Level Security Policies
CREATE POLICY "Users can view own profile" ON user_profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update own profile" ON user_profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Users can insert own profile" ON user_profiles FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Authenticated users can view clients" ON clients FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can manage clients" ON clients FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view jobs" ON jobs FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can manage jobs" ON jobs FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view leads" ON leads FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can manage leads" ON leads FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view quotes" ON quotes FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can manage quotes" ON quotes FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view invoices" ON invoices FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can manage invoices" ON invoices FOR ALL USING (auth.role() = 'authenticated');
```

4. AUTH CONFIGURATION:
   - Enable email authentication
   - Configure email templates
   - Set up custom SMTP (optional)

SUPABASE CLIENT CONFIGURATION:
===============================
```javascript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

================================================================================
9. SECURITY IMPLEMENTATION
================================================================================

ROW LEVEL SECURITY (RLS):
==========================
- All tables have RLS enabled
- Users can only access data they're authorized for
- Role-based permissions (Admin > Manager > Technician)

AUTHENTICATION SECURITY:
=========================
- JWT tokens with automatic refresh
- Secure password requirements
- Email verification for new accounts
- Password reset with secure tokens

DATA VALIDATION:
================
- Input sanitization on frontend and backend
- Type checking with TypeScript
- Database constraints and checks
- SQL injection prevention

API SECURITY:
=============
- Supabase handles API rate limiting
- CORS configuration
- HTTPS enforcement
- Environment variable protection

FRONTEND SECURITY:
==================
- XSS prevention with React's built-in protections
- CSRF protection
- Content Security Policy headers
- Secure cookie handling

================================================================================
10. PERFORMANCE OPTIMIZATION
================================================================================

DATABASE OPTIMIZATION:
=======================
- Strategic indexes on frequently queried columns
- Connection pooling via Supabase
- Query optimization with .select() specificity
- Pagination for large datasets

FRONTEND OPTIMIZATION:
======================
- Code splitting with dynamic imports
- Image optimization with next/image
- Bundle size optimization
- Lazy loading for non-critical components

CACHING STRATEGIES:
===================
- Browser caching for static assets
- React Query for server state caching
- LocalStorage for user preferences
- Supabase real-time subscriptions for live updates

LOADING STRATEGIES:
===================
- Skeleton loaders for better UX
- Parallel data fetching with Promise.all()
- Progressive enhancement
- Error boundaries for graceful failures

================================================================================
11. ERROR HANDLING STRATEGIES
================================================================================

DATABASE ERROR HANDLING:
=========================
```javascript
try {
  const { data, error } = await supabase.from('table').select();
  if (error) throw error;
  return data;
} catch (error) {
  console.error('Database error:', error);
  throw new Error(`Failed to fetch data: ${error.message}`);
}
```

FRONTEND ERROR HANDLING:
========================
- Error boundaries for component crashes
- Form validation with user-friendly messages
- Network error handling with retry mechanisms
- Loading states and error states for all async operations

ERROR LOGGING:
==============
- Console logging for development
- Supabase logs for production monitoring
- User-friendly error messages
- Error reporting with context

GRACEFUL DEGRADATION:
=====================
- Fallback UI for loading failures
- Offline functionality where possible
- Progressive enhancement approach
- Retry mechanisms for failed operations

================================================================================
12. PRODUCTION DEPLOYMENT
================================================================================

ENVIRONMENT SETUP:
==================
Production Environment Variables:
```bash
NEXT_PUBLIC_SUPABASE_URL=your_production_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_production_key
NEXT_PUBLIC_APP_URL=https://your-domain.com
```

DEPLOYMENT CHECKLIST:
=====================
□ Database schema deployed to production Supabase
□ Environment variables configured
□ SSL certificate configured
□ Custom domain setup
□ Email authentication configured
□ Backup strategy implemented
□ Monitoring setup
□ Error tracking configured

SUPABASE PRODUCTION SETTINGS:
==============================
- Enable database backups
- Configure custom SMTP
- Set up monitoring and alerts
- Configure proper CORS settings
- Enable API analytics

NEXT.JS DEPLOYMENT:
===================
- Build optimization enabled
- Static file optimization
- CDN configuration for assets
- Server-side rendering optimization

================================================================================
13. MONITORING & MAINTENANCE
================================================================================

MONITORING POINTS:
==================
- Database performance and query times
- API response times
- Error rates and types
- User authentication issues
- Storage usage and limits

MAINTENANCE TASKS:
==================
- Regular database backups
- Security updates for dependencies
- Performance optimization reviews
- User feedback analysis
- Feature usage analytics

SCALING CONSIDERATIONS:
=======================
- Database connection limits
- Storage capacity planning
- Bandwidth usage monitoring
- User growth impact analysis

BACKUP STRATEGY:
================
- Automated daily database backups
- Code repository backups
- Environment configuration backups
- Disaster recovery procedures

================================================================================
ADDITIONAL RESOURCES & REFERENCES
================================================================================

SUPABASE DOCUMENTATION:
- https://supabase.com/docs
- Authentication: https://supabase.com/docs/guides/auth
- Database: https://supabase.com/docs/guides/database
- Real-time: https://supabase.com/docs/guides/realtime

NEXT.JS DOCUMENTATION:
- https://nextjs.org/docs
- App Router: https://nextjs.org/docs/app
- TypeScript: https://nextjs.org/docs/basic-features/typescript

DEVELOPMENT COMMANDS:
=====================
- npm run dev: Start development server
- npm run build: Build for production
- npm run start: Start production server
- npm run lint: Run ESLint
- npm run type-check: TypeScript type checking

TESTING STRATEGY:
=================
- Unit tests for utility functions
- Integration tests for API operations
- E2E tests for critical user flows
- Performance testing for scalability

================================================================================
CONCLUSION
================================================================================

This documentation provides a complete blueprint for building and maintaining
the VoltFlow CRM backend system. The architecture is designed for scalability,
security, and maintainability. All calculations and business logic are clearly
defined, making it easy to implement additional features or modify existing ones.

For production deployment, follow the security guidelines and monitoring 
recommendations to ensure a robust, reliable system.

This system is production-ready and can handle real-world electrical business
operations efficiently and securely.

================================================================================
VERSION: 1.0
LAST UPDATED: 2024
AUTHOR: VoltFlow Development Team
================================================================================ 